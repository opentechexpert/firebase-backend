{"version":3,"file":"firebase-backend.cjs.production.min.js","sources":["../src/models.ts","../src/functionParser.ts"],"sourcesContent":["// models.ts\n\n/**\n * @export\n * @enum {number}\n */\nexport enum RequestType {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n}\n\n/**\n * @export\n * @interface IExpressHandler\n */\nexport interface IExpressHandler {\n  (req: any, res: any): any;\n}\n\n/**\n * @export\n * @interface IExpressMiddleware\n */\nexport interface IExpressMiddleware {\n  (req: any, res: any, next: any): any;\n}\n\n/**\n * @export\n * @interface ParserOptions\n */\nexport interface ParserOptions {\n  enableCors?: boolean;\n  buildReactive?: boolean;\n  buildEndpoints?: boolean;\n  groupByFolder?: boolean;\n  regional?: string;\n}\n\n/**\n * @export\n * @interface EndpointOptions\n */\nexport interface EndpointOptions {\n  enableCors?: boolean;\n  enableFileUpload?: boolean;\n}\n\n/**\n * Stores the information to be used when creating a restful endpoint on the backend\n *\n * @export\n * @class Endpoint\n */\nexport class Endpoint {\n  /**\n   * Creates an instance of Endpoint.\n   *\n   * @param {string} name\n   * @param {RequestType} requestType\n   * @param {IExpressHandler} handler\n   * @param {EndpointOptions} options\n   * @memberof Endpoint\n   */\n  constructor(\n    /**\n     * @deprecated \"name\" parameter is no longer needed\n     */\n    public name: string | undefined,\n    public requestType: RequestType,\n    public handler: IExpressHandler,\n    public middleware?: IExpressMiddleware[] | undefined,\n    public options?: EndpointOptions,\n  ) {\n    if (!handler) {\n      throw new Error('Please provide a endpoint request handler.');\n    }\n\n    this.name = name;\n    this.handler = handler;\n    this.middleware = middleware;\n    this.requestType = requestType;\n    this.options = options;\n  }\n}\n\nexport class Get extends Endpoint {\n  constructor(handler: IExpressHandler, middleware?: IExpressMiddleware[], options?: EndpointOptions) {\n    super(undefined, RequestType.GET, handler, middleware, options);\n  }\n}\n\nexport class Post extends Endpoint {\n  constructor(handler: IExpressHandler, middleware?: IExpressMiddleware[], options?: EndpointOptions) {\n    super(undefined, RequestType.POST, handler, middleware, options);\n  }\n}\nexport class Put extends Endpoint {\n  constructor(handler: IExpressHandler, middleware?: IExpressMiddleware[], options?: EndpointOptions) {\n    super(undefined, RequestType.PUT, handler, middleware, options);\n  }\n}\nexport class Delete extends Endpoint {\n  constructor(handler: IExpressHandler, middleware?: IExpressMiddleware[], options?: EndpointOptions) {\n    super(undefined, RequestType.DELETE, handler, middleware, options);\n  }\n}\nexport class Patch extends Endpoint {\n  constructor(handler: IExpressHandler, middleware?: IExpressMiddleware[], options?: EndpointOptions) {\n    super(undefined, RequestType.PATCH, handler, middleware, options);\n  }\n}\n","// functionParser.ts\n\nimport express, { Application, Router } from 'express';\nimport fileUpload from 'express-fileupload';\nimport * as functions from 'firebase-functions';\nimport glob from 'glob';\nimport cors from 'cors';\nimport { parse, ParsedPath } from 'path';\nimport { Endpoint, ParserOptions, RequestType } from './models';\n\n// enable short hand for console.log()\nconst { log } = console;\n\n/**\n * This class helps with setting sup the exports for the cloud functions deployment.\n *\n * It takes in exports and then adds the required groups and their functions to it for deployment\n * to the cloud functions server.\n *\n * @export\n * @class FunctionParser\n */\nexport class FunctionParser {\n  rootPath: string;\n\n  enableCors: boolean;\n\n  exports: any;\n\n  /**\n   * Creates an instance of FunctionParser.\n   *\n   * @param {string} rootPath\n   * @param {*} exports\n   * @param {ParserOptions} [options]\n   * @memberof FunctionParser\n   */\n  constructor(\n    rootPath: string,\n    exports: any,\n    options?: ParserOptions\n  ) {\n    if (!rootPath) {\n      throw new Error('rootPath is required to find the functions.');\n    }\n\n    this.rootPath = rootPath;\n    this.exports = exports;\n\n    // Set default option values for if not provided\n    this.enableCors = options?.enableCors ?? false;\n    let groupByFolder: boolean = options?.groupByFolder ?? true;\n    let buildReactive: boolean = options?.buildReactive ?? true;\n    let buildEndpoints: boolean = options?.buildEndpoints ?? true;\n    let regional: string = options?.regional ?? '';\n\n    if (buildReactive) {\n      this.buildReactiveFunctions(groupByFolder);\n    }\n\n    if (buildEndpoints) {\n      this.buildRestfulApi(groupByFolder, regional);\n    }\n  }\n\n  /**\n   * Looks for all files with .function.js and exports them on the group they belong to\n   *\n   * @private\n   * @param {boolean} groupByFolder\n   * @memberof FunctionParser\n   */\n  private buildReactiveFunctions(groupByFolder: boolean) {\n    log('Reactive Functions - Building...');\n\n    // Get all the files that has .function in the file name\n    const functionFiles: string[] = glob.sync(\n      `${this.rootPath}/**/*.function.js`,\n      {\n        cwd: this.rootPath,\n        ignore: './node_modules/**',\n      },\n    );\n\n    functionFiles.forEach((file: string) => {\n      const filePath: ParsedPath = parse(file);\n\n      const directories: string[] = filePath.dir.split('/');\n\n      const groupName: string = groupByFolder\n        ? directories[directories.length - 2] || ''\n        : directories[directories.length - 1] || '';\n\n      const functionName = filePath.name.replace('.function', '');\n\n      if (\n        !process.env.FUNCTION_NAME ||\n        process.env.FUNCTION_NAME === functionName\n      ) {\n        if (!this.exports[groupName]) this.exports[groupName] = {};\n        log(`Reactive Functions - Added ${groupName}/${functionName}`);\n\n        this.exports[groupName] = {\n          ...this.exports[groupName],\n          ...require(file),\n        };\n      }\n    });\n\n    log('Reactive Functions - Built');\n  }\n\n  /**\n   * Looks at all .endpoint.js files and adds them to the group they belong in\n   *\n   * @private\n   * @param {boolean} groupByFolder\n   * @memberof FunctionParser\n   */\n  private buildRestfulApi(groupByFolder: boolean, regional: string) {\n    log('Restful Endpoints - Building...');\n\n    const apiFiles: string[] = glob.sync(`${this.rootPath}/**/*.endpoint.js`, {\n      cwd: this.rootPath,\n      ignore: './node_modules/**',\n    });\n\n    const app: Application = express();\n\n    const groupRouters: Map<string, express.Router> = new Map();\n\n    apiFiles.forEach((file: string) => {\n      const filePath: ParsedPath = parse(file);\n\n      const directories: Array<string> = filePath.dir.split('/');\n\n      const groupName: string = groupByFolder\n        ? directories[directories.length - 2] || ''\n        : directories[directories.length - 1] || '';\n\n      let router: Router | undefined = groupRouters.get(groupName);\n\n      if (!router) {\n        router = express.Router();\n\n        groupRouters.set(groupName, router);\n      }\n\n      try {\n        this.buildEndpoint(file, groupName, router);\n      } catch (e) {\n        throw new Error(\n          `Restful Endpoints - Failed to add the endpoint defined in ${file} to the ${groupName} Api.`,\n        );\n      }\n\n      app.use('/', router);\n\n      this.exports[groupName] = {\n        ...this.exports[groupName],\n\n        api: regional == '' ? functions.https.onRequest(app) : functions.region(`${regional}`).https.onRequest(app),\n      };\n    });\n\n    log('Restful Endpoints - Built');\n  }\n\n  /**\n   * Parses a .endpoint.js file and sets the endpoint path on the provided router\n   *\n   * @private\n   * @param {string} file\n   * @param {express.Router} router\n   * @memberof FunctionParser\n   */\n  private buildEndpoint(\n    file: string,\n    groupName: string,\n    router: express.Router,\n  ) {\n    const filePath: ParsedPath = parse(file);\n\n    const endpoint: Endpoint = require(file).default as Endpoint;\n\n    const name: string =\n      endpoint.name || filePath.name.replace('.endpoint', '');\n\n    const { handler } = endpoint;\n\n    const { middleware } = endpoint;\n\n\n    // Enable cors if it is enabled globally else only enable it for a particular route\n    if (this.enableCors) {\n      router.use(cors());\n    }\n    else if (endpoint.options?.enableCors) {\n      log(`Cors enabled for ${name}`);\n      router.use(cors());\n    }\n\n    if (endpoint.options?.enableFileUpload) {\n      log(`File upload enabled for ${name}`);\n      router.use(fileUpload());\n    }\n\n    switch (endpoint.requestType) {\n      case RequestType.GET:\n        if (middleware) {\n          const mw = middleware;\n          router.get(`/${name}`, mw, handler);\n          break;\n        }\n        router.get(`/${name}`, handler);\n        break;\n\n      case RequestType.POST:\n        if (middleware) {\n          const mw = middleware;\n          router.post(`/${name}`, mw, handler);\n          break;\n        }\n        router.post(`/${name}`, handler);\n        break;\n\n      case RequestType.PUT:\n        if (middleware) {\n          const mw = middleware;\n          router.put(`/${name}`, mw, handler);\n          break;\n        }\n        router.put(`/${name}`, handler);\n        break;\n\n      case RequestType.DELETE:\n        if (middleware) {\n          const mw = middleware;\n          router.delete(`/${name}`, mw, handler);\n          break;\n        }\n        router.delete(`/${name}`, handler);\n        break;\n\n      case RequestType.PATCH:\n        if (middleware) {\n          const mw = middleware;\n          router.patch(`/${name}`, mw, handler);\n          break;\n        }\n        router.patch(`/${name}`, handler);\n        break;\n\n      default:\n        throw new Error(\n          `A unsupported RequestType was defined for a Endpoint.\\n\n          Please make sure that the Endpoint file exports a RequestType\n          using the constants in src/system/constants/requests.ts.\\n\n          **This value is required to add the Endpoint to the API**`,\n        );\n    }\n    log(\n      `Restful Endpoints - Added ${groupName}/${endpoint.requestType}:${name}`,\n    );\n  }\n}\n"],"names":["RequestType","Endpoint","name","requestType","handler","middleware","options","Error","Get","_Endpoint","undefined","GET","Post","_Endpoint2","POST","Put","_Endpoint3","PUT","Delete","_Endpoint4","DELETE","Patch","_Endpoint5","PATCH","log","console","FunctionParser","rootPath","exports","enableCors","groupByFolder","buildReactive","buildEndpoints","regional","buildReactiveFunctions","buildRestfulApi","glob","sync","this","cwd","ignore","forEach","file","filePath","parse","directories","dir","split","groupName","length","functionName","replace","process","env","FUNCTION_NAME","_this","require","apiFiles","app","express","groupRouters","Map","router","get","Router","set","_this2","buildEndpoint","e","use","api","functions","onRequest","https","endpoint","cors","_endpoint$options","_endpoint$options2","enableFileUpload","fileUpload","post","put","patch"],"mappings":"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"}